<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"

"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Notes">
	<resultMap type="Notes" id="notes">
		<id property="notes_id" column="notes_id" javaType="java.lang.Integer" />
		<id property="version" column="version" javaType="java.lang.Integer" />
		<result property="notebook_id" column="notebook_id" javaType="java.lang.Integer" />
		<result property="current_version" column="current_version" javaType="java.lang.Integer" />
		<result property="notes_title" column="notes_title" javaType="java.lang.String" />
		<result property="source" column="source" javaType="java.lang.String" />
		<result property="author" column="author" javaType="java.lang.String" />
		<result property="last_author" column="last_author" javaType="java.lang.String" />
		<result property="create_time" column="create_time" javaType="java.util.Date" />
		<result property="last_modified" column="last_modified" javaType="java.util.Date" />
		<result property="content" column="content" javaType="java.lang.String" />
		<result property="status" column="status" javaType="java.lang.Integer" />
		<result property="tenant" column="tenant" javaType="java.lang.Integer" />
	</resultMap>
	
	<select id="queryNoteByAuthor" resultType="Notes">
		select t1.notes_id, t1.version, t1.notes_title,  t1.notebook_id, t1.current_version, t1.author, t1.last_author, t1.create_time, t1.last_modified  from
		notes t1 inner join (select t.notes_id, max(t.version) mv from notes t
		where t.author = #{author} group by t.notes_id ) t2 on
		t1.notes_id = t2.notes_id and t1.version = t2.mv order by t1.create_time desc
	</select>
	
	<select id="queryAuthorLastNote" resultType="Notes">
		select t1.* from
		notes t1 inner join (select t.last_modified, t.notes_id, t.version, t.author from notes t 
		where t.author = #{author} and t.status = #{status} order by t.last_modified desc, t.version desc, t.notes_id desc limit 1)  t2 on t1.notes_id = t2.notes_id and t1.version = t2.version;
	</select>

	<select id="queryNoteByNoteBook" resultType="Notes">
		select t1.notes_id, t1.version, t1.notes_title,  t1.notebook_id, t1.current_version, t1.author, t1.last_author, t1.create_time, t1.last_modified from
		notes t1 inner join (select t.notes_id, max(t.version) mv from notes t
		where t.notebook_id = #{notebook_id} and t.status = #{status} group by t.notes_id ) t2 on
		t1.notes_id = t2.notes_id and t1.version = t2.mv order by t1.create_time desc
	</select>

	<select id="queryNoteById" resultType="Notes">
		select * from notes where
		notes_id = #{notes_id} and version=#{version}
	</select>
	
	<!-- ID自增使用 -->
	<select id="queryNoteMaxNoteId" resultType="java.lang.Integer">
		select max(notes_id) from notes
	</select>
	
	<!-- version自增使用 -->
	<select id="queryNoteMaxVersionById" resultType="java.lang.Integer">
		select max(version) from notes where
		notes_id = #{notes_id}
	</select>
	
	<select id="queryNoteVersionsById"  resultType="Notes">
		select version, notes_title,  notebook_id, current_version, last_author, last_modified from notes where
		notes_id = #{notes_id} and status=#{status}
	</select>

	<select id="queryDeleteNote" resultType="Notes">
		select t1.notes_id, t1.version, t1.notes_title,  t1.notebook_id, t1.current_version, t1.author, t1.last_author, t1.create_time, t1.last_modified from
		notes t1 inner join (select t.notes_id, max(t.version) mv from notes t
		where t.author=#{author} and t.status = #{status} group by t.notes_id ) t2 on
		t1.notes_id = t2.notes_id and t1.version = t2.mv order by t1.create_time desc
	</select>
	
	<select id="searchNote" resultType="Notes">
		select t1.notes_id, t1.version, t1.notes_title,  t1.notebook_id, t1.current_version, t1.author, t1.last_author, t1.create_time, t1.last_modified from
		notes t1 inner join (select t.notes_id, max(t.version) mv from notes t
		where (t.notes_title like  "%"#{searchParam}"%" or t.content like "%"#{searchParam}"%" or t.tenant like  "%"#{searchParam}"%") and author=#{author} and status=#{status} group by t.notes_id ) t2 on
		t1.notes_id = t2.notes_id and t1.version = t2.mv order by  t1.create_time desc
	</select>
	
	<select id="searchNotesLatestNote" resultType="Notes">
		select t4.* from notes t4 where t4.last_modified = (select max(t3.last_modified) from (select t1.notes_id, t1.version, t1.notes_title,  t1.notebook_id, t1.current_version, t1.author, t1.last_author, t1.create_time, t1.last_modified from
		notes t1 inner join (select t.notes_id, max(t.version) mv from notes t
		where (t.notes_title like  "%"#{searchParam}"%" or t.content like "%"#{searchParam}"%" or t.tenant like  "%"#{searchParam}"%") and author=#{author} and status=#{status} group by t.notes_id ) t2 on
		t1.notes_id = t2.notes_id and t1.version = t2.mv) t3)
	</select>
	
	

	<insert id="saveNote" parameterType="Notes">
		insert into
		notes(notes_id,version,notebook_id,current_version,notes_title,source,author,
		last_author,create_time,last_modified,content,status,tenant) values (
		#{notes_id},#{version},#{notebook_id},#{current_version},#{notes_title},
		#{source}, #{author},
		#{last_author}, #{create_time}, #{last_modified},
		#{content}, #{status}, #{tenant})
	</insert>

	<update id="updateNote" parameterType="Notes">
		update notes set
		notes_title=#{notes_title},source=#{source},content=#{content}, last_author=#{last_author}, last_modified=#{last_modified}, tenant=#{tenant}
		where notes_id=#{notes_id} and version=#{version}
	</update>

	<update id="moveAllNotes">
		update notes set notebook_id=#{new_notebook_id} where
		notebook_id=#{old_notebook_id}
	</update>
	
	<update id="moveNote">
		update notes set notebook_id=#{new_notebook_id} where
		notebook_id=#{old_notebook_id} and notes_id = #{notes_id}
	</update>

	<update id="deleteNote">
		update notes set status=#{status},  notebook_id=#{notebook_id}  where
		notes_id=#{notes_id}
	</update>
	
	<update id="deleteNoteVersion">
		update notes set status=#{status}  where
		notes_id=#{notes_id} and version=#{version}
	</update>
	
	<update id="restAllNotes">
		update notes set status=#{status}, notebook_id=#{notebook_id}  where
		author=#{author} and status = #{status2}
	</update>

	<delete id="removeNote" parameterType="java.lang.Integer">
		delete from notes where
		notes_id = #{notes_id}
	</delete>
	
	<delete id="removeAllNotes" >
		delete from notes where
		author = #{author} and status = #{status}
	</delete>
</mapper>