package com.ces.cloud.note.core.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import net.sourceforge.stripes.action.DefaultHandler;
import net.sourceforge.stripes.action.UrlBinding;
import net.sourceforge.stripes.integration.spring.SpringBean;

import com.ces.cloud.note.base.action.BaseAction;
import com.ces.cloud.note.base.util.EncryptUtils;
import com.ces.cloud.note.base.util.GenerateImage;
import com.ces.cloud.note.core.manage.NoteBookManage;
import com.ces.cloud.note.core.manage.NoteManage;
import com.ces.cloud.note.core.pojo.Note;

/**
 * 相关描述： 笔记Action类
 *
 * 文件名：NoteAction.java
 * 作者： Fu Zhaohui 
 * 完成时间：2013-1-11 上午11:45:18 
 * 维护人员：Fu Zhaohui  
 * 维护时间：2013-1-11 上午11:45:18 
 * 维护原因：  
 * 当前版本： v1.0 
 *
 */
@UrlBinding("/action/note")
public class NoteAction extends BaseAction {
	
	private Note note;
	private List<Note> noteVersions;
	
	private File attachment;
	public String attachmentFileName;
	public String attachmentFileContentType;
	
	private String noteId;
	
	@SpringBean
	private NoteManage noteManage;
	@SpringBean
	private NoteBookManage noteBookManage;
	

	/**
	 * 方法描述：　用户最近修改笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:06:15
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:06:15
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	@DefaultHandler
	public String authorLastNote() {
		String username = (String) getSession().getAttribute("userName");
		if(username != null && !username.equals("")) {
			note = noteManage.queryLastAuthorNote(username);
		} else {
			sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
		}
		return "JsonData";
	} 
	
	/**
	 * 方法描述：　保存笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:06:02
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:06:02
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String addNote() {
		String username = (String) getSession().getAttribute("userName");
		if(username != null && !username.equals("")) {
			if(note.getNotebook_id() == 0 ) {
				note.setNotebook_id(noteBookManage.queryDefaultNoteBook("ces").getNotebook_id());
			}
			if(note.getNotes_id() == 0) {
				note.setNotes_id(noteManage.queryNoteMaxNoteId() + 1);
			}
			String noteTitle = note.getNotes_title();
			if(noteTitle != null && !noteTitle.trim().equals("")) {
				try {
					note.setNotes_title(exchangeEncode(noteTitle));
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			} else {
				sendMsg("{\"success\": false, \"msg\": \"笔记Title数据异常!\"}");
			}
			String content = note.getContent();
			if(content != null && !content.trim().equals("")) {
				try {
					note.setContent(exchangeEncode(content));
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}
			String source = note.getSource();
			if(source != null && !source.trim().equals("")) {
				try {
					note.setSource(exchangeEncode(source));
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}
			Date now = new Date();
			note.setCreate_time(now);
			note.setAuthor(username);
			note.setLast_author(username);
			int version = noteManage.queryNoteMaxVersionById(note.getNotes_id());
			note.setVersion(version + 1);
			note.setLast_modified(now);
			note.setCurrent_version(version + 1);
			String callBackStr = noteManage.addNote(note);
			sendMsg(callBackStr);
		} else {
			sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：　恢复笔记版本
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:06:02
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:06:02
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String restNoteVersion() {
		String username = (String) getSession().getAttribute("userName");
		if(username != null && !username.equals("")) {
			String noteId = getRequest().getParameter("noteId");
			String version = getRequest().getParameter("version");
			if(noteId == null || noteId.equals("") || version == null || version.equals("")) {
				sendMsg("{\"success\": false,\"msg\": \"传入数据异常!\"}");
			} else {
				Note versionNote = noteManage.queryNoteById(Integer.parseInt(noteId), Integer.parseInt(version));
				int maxVersion = noteManage.queryNoteMaxVersionById(Integer.parseInt(noteId));
				versionNote.setVersion(maxVersion + 1);
				versionNote.setCurrent_version(maxVersion + 1);
				versionNote.setLast_modified(new Date());
				versionNote.setLast_author(username);
				String callBackStr = noteManage.addNote(versionNote);
				sendMsg(callBackStr);
			}
		} else {
			sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：　查看笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:05:54
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:05:54
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String detailNote() {
		
		String noteId = getRequest().getParameter("noteId");
		String version = getRequest().getParameter("version");
		if(noteId == null || noteId.equals("") || version == null || version.equals("")) {
			sendMsg("{\"success\": false,\"msg\": \"传入数据异常!\"}");
		} else {
			this.note = noteManage.queryNoteById(Integer.parseInt(noteId), Integer.parseInt(version));
			this.noteVersions = noteManage.queryNoteVersions(Integer.parseInt(noteId));
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：　定时保存更新笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:05:41
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:05:41
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String editNote() {
		String username = (String) getSession().getAttribute("userName");
		if(username != null && !username.equals("")) {
			if(note.getNotes_id() != 0 && note.getVersion() != 0) {
				Note oldNote = noteManage.queryNoteById(note.getNotes_id(), note.getVersion());
				String noteTitle = note.getNotes_title();
				if(noteTitle != null && !noteTitle.trim().equals("")) {
					try {
						oldNote.setNotes_title(exchangeEncode(noteTitle));
					} catch (UnsupportedEncodingException e) {
						e.printStackTrace();
					}
				} 
				String content = note.getContent();
				if(content != null && !content.trim().equals("")) {
					try {
						oldNote.setContent(exchangeEncode(content));
					} catch (UnsupportedEncodingException e) {
						e.printStackTrace();
					}
				}
				String source = note.getSource();
				if(source != null && !source.trim().equals("")) {
					try {
						oldNote.setSource(exchangeEncode(source));
					} catch (UnsupportedEncodingException e) {
						e.printStackTrace();
					}
				}
				oldNote.setLast_author(username);
				oldNote.setLast_modified(new Date());
				String callBackStr = noteManage.editNote(oldNote);
				sendMsg(callBackStr);
			}
		} else {
			sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：移动笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:05:33
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:05:33
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String moveNote() {
		String newNoteBookId = getRequest().getParameter("newNoteBookId");
		String oldNoteBookId = getRequest().getParameter("oldNoteBookId");
		String noteId = getRequest().getParameter("noteId");
		if(newNoteBookId == null || newNoteBookId.equals("") || oldNoteBookId == null || oldNoteBookId.equals("") || noteId == null || note.equals("")) {
			sendMsg("{\"success\": false,\"msg\": \"传入数据异常!\"}");
		} else {
			String callBackStr = noteManage.moveNote(Integer.parseInt(newNoteBookId), Integer.parseInt(oldNoteBookId), Integer.parseInt(noteId));
			sendMsg(callBackStr);
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：移动笔记本里所有笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:05:20
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:05:20
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String moveAllNotes() {
		String newNoteBookId = getRequest().getParameter("newNoteBookId");
		String oldNoteBookId = getRequest().getParameter("oldNoteBookId");
		if(newNoteBookId == null || newNoteBookId.equals("") || oldNoteBookId == null || oldNoteBookId.equals("")) {
			sendMsg("{\"success\": false,\"msg\": \"传入数据异常!\"}");
		} else {
			String callBackStr = noteManage.moveAllNotes(Integer.parseInt(newNoteBookId), Integer.parseInt(oldNoteBookId));
			sendMsg(callBackStr);
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：删除笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:05:13
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:05:13
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String deleteNote() {
		String noteId = getRequest().getParameter("noteId");
		if(noteId == null || noteId.equals("")) {
			sendMsg("{\"success\": false,\"msg\": \"传入数据异常!\"}");
		} else {
			String callBackStr = noteManage.deleteNote(Integer.parseInt(noteId));
			sendMsg(callBackStr);
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：删除笔记版本
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-23 上午10:22:48
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-23 上午10:22:48
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 *//*
	public String deleteNoteVersion() {
		String noteId = getRequest().getParameter("noteId");
		String version = getRequest().getParameter("version");
		if(noteId == null || noteId.trim().equals("") || version == null || version.trim().equals("")) {
			sendMsg("{\"success\": false,\"msg\": \"传入数据异常!\"}");
		} else {
			String callBackStr = noteManage.deleteNoteVersion(Integer.parseInt(noteId), Integer.parseInt(version));
			sendMsg(callBackStr);
		}
		return "JsonData";
	}*/
	
	/**
	 * 方法描述：恢复笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:05:03
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:05:03
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String restNote() {
		String username = (String) getSession().getAttribute("userName");
		if(username != null && !username.equals("")) {
			String noteId = getRequest().getParameter("noteId");
			if(noteId == null || noteId.equals("")) {
				sendMsg("{\"success\": false,\"msg\": \"传入数据异常!\"}");
			} else {
				String callBackStr = noteManage.restNote(username, Integer.parseInt(noteId));
				sendMsg(callBackStr);
			}
		} else {
			sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：恢复用户所有笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:04:53
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:04:53
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String restAllNotes() {
		String username = (String) getSession().getAttribute("userName");
		if(username != null && !username.equals("")) {
			String callBackStr = noteManage.restAllNotes(username);
			sendMsg(callBackStr);
		} else {
			sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：　清空笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:04:19
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:04:19
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String removeNote() {
		String username = (String) getSession().getAttribute("userName");
		if(username != null && !username.equals("")) {
			String noteId = getRequest().getParameter("noteId");
			if(noteId == null || noteId.equals("")) {
				sendMsg("{\"success\": false,\"msg\": \"传入数据异常!\"}");
			} else {
				String callBackStr = noteManage.removeNote(Integer.parseInt(noteId));
				// 删除上传附件
				String userAttachmentPathStr = getContext().getServletContext().getRealPath("/") + username;
	        	File userAttachmentPath = new File(userAttachmentPathStr);
	        	File userNoteAttachmentPath = new File(userAttachmentPath, noteId);
	        	if(userNoteAttachmentPath.exists()) {
		        	File[] files = userNoteAttachmentPath.listFiles();
		        	for(File file : files) {
		    			file.delete();
		        	}
		        	userNoteAttachmentPath.delete();
	        	}
				sendMsg(callBackStr);
			}
		} else {
			sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：　清空用户所有笔记
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午11:04:26
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午11:04:26
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String removeAllNotes() {
		String username = (String) getSession().getAttribute("userName");
		if(username != null && !username.equals("")) {
			String callBackStr = noteManage.removeAllNotes(username);
			List<Note> deleteNotes = noteManage.queryDeleteNote(username);
			// 删除上传附件
			String userAttachmentPathStr = getContext().getServletContext().getRealPath("/")  + username;
	    	File userAttachmentPath = new File(userAttachmentPathStr);
			for(Note note: deleteNotes) {
	        	File userNoteAttachmentPath = new File(userAttachmentPath, note.getNotes_id() + "");
	        	if(userNoteAttachmentPath.exists()) {
		        	File[] files = userNoteAttachmentPath.listFiles();
		        	for(File file : files) {
		    			file.delete();
		        	}
		        	userNoteAttachmentPath.delete();
	        	}
			}
			sendMsg(callBackStr);
		} else {
			sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
		}
		return "JsonData";
	}
	
	/**
	 * 方法描述：上传附件
	 *
	 * 作者： Fu Zhaohui
	 * 完成时间： 2013-1-14 上午10:58:04
	 * 维护人员： Fu Zhaohui
	 * 维护时间： 2013-1-14 上午10:58:04
	 * 维护原因: 
	 * 当前版本： v1.0 
	 * @return
	 */
	public String uploadAttachment() {
		if(attachment != null && attachment.exists()) {
			String username = (String) getSession().getAttribute("userName");
			if(username != null && !username.equals("")) {
		        try {
		        	String imageURL = getContext().getServletContext().getRealPath("/") + "images";
		        	String userAttachmentPathStr = getContext().getServletContext().getRealPath("/") + username;
		        	File userAttachmentPath = new File(userAttachmentPathStr);
		        	if(noteId == null || noteId.equals("")) {
		        		noteId = noteManage.queryNoteMaxNoteId() + 1 + "";
		        	}
		        	File userNoteAttachmentPath = new File(userAttachmentPath, noteId);
		        	if(!userNoteAttachmentPath.exists()) {
		        		userNoteAttachmentPath.mkdirs();
		        	}
		        	File targetFile = new File(userNoteAttachmentPath,  attachmentFileName);
		        	FileInputStream  fileInputeStream = new FileInputStream(attachment);
		        	FileOutputStream fileOutputStream = new FileOutputStream(targetFile);
		           
		            byte[] buffer = new byte[1024];
		            int len = 0;
		            while ((len = fileInputeStream.read(buffer)) > 0) {
		                fileOutputStream.write(buffer, 0, len);
		            }
		            fileOutputStream.flush();
		            fileOutputStream.close();
		            fileInputeStream.close();
		     
		            String trim = attachmentFileName.substring(attachmentFileName.lastIndexOf(".") + 1).toLowerCase();
		            String imageName;
		            if(!trim.equals("png") && !trim.equals("jpg") && !trim.equals("gif") && !trim.equals("bmp")){
			            if(trim.equals("doc") || trim.equals("docx")) {
			            	imageName = imageURL +  "/doc.png";
			            } else if(trim.equals("ppt") || trim.equals("pptx")) {
			            	imageName = imageURL +  "/ppt.png";
			            } else if(trim.equals("xls") || trim.equals("xlsx")) {
			            	imageName = imageURL +  "/excel.png";
			            } else if(trim.equals("pdf")) {
			            	imageName = imageURL +  "/pdf.png";
			            } else {
			            	imageName = imageURL +  "/txt.png";
			            }
			            File renameFile = new File(userNoteAttachmentPath, EncryptUtils.encryptMD5(attachmentFileName.substring(0, attachmentFileName.lastIndexOf("."))) + attachmentFileName.substring(attachmentFileName.lastIndexOf(".")));
			            if(renameFile.exists()) {
			            	renameFile.delete();
			            }
			            targetFile.renameTo(renameFile);
			            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd hh:mm");
			            String imageContent = format.format(new Date()) + ", " + renameFile.length() /1000 + "KB";
			            File targetImageFile = new File(userNoteAttachmentPath, renameFile.getName().substring(0, renameFile.getName().lastIndexOf(".")) + ".png");
			            GenerateImage.generateImage(imageURL, imageName, attachmentFileName, imageContent, targetImageFile);
			            String targetImageAbsolutePath = targetImageFile.getAbsolutePath();
			            String targetImg = targetImageAbsolutePath.substring(targetImageAbsolutePath.indexOf(username)).replace("\\", "/"); 
			            sendMsg("{\"fileName\":\"" + attachmentFileName +"\", \"img\":\"" + targetImg +"\"}");
		            } else {
		            	String targetFileAbsolutePath = targetFile.getAbsolutePath();
		            	String targetImg = targetFileAbsolutePath.substring(targetFileAbsolutePath.indexOf(username)).replace("\\", "/"); 
		            	sendMsg("{\"fileName\":\"" + attachmentFileName +"\", \"img\":\"" + targetImg +"\"}");
		            }
		            return "";
	            } catch (Exception e) {
		        	e.printStackTrace();
		        	sendMsg("{\"success\": false, \"msg\": \"上传附件异常!\"}");
		        } 
			} else {
				sendMsg("{\"success\": false, \"msg\": \"当前用户为空!\"}");
			}
		} else {
			sendMsg("{\"success\": false, \"msg\": \"上传附件异常!\"}");
		}
		return "JsonData";
	}
	
	public Note getNote() {
		return note;
	}

	public void setNote(Note note) {
		this.note = note;
	}
	
	public File getAttachment() {
		return attachment;
	}

	public void setAttachment(File attachment) {
		this.attachment = attachment;
	}

	public String getAttachmentFileName() {
		return attachmentFileName;
	}

	public void setAttachmentFileName(String attachmentFileName) {
		this.attachmentFileName = attachmentFileName;
	}

	public String getAttachmentFileContentType() {
		return attachmentFileContentType;
	}

	public void setAttachmentFileContentType(String attachmentFileContentType) {
		this.attachmentFileContentType = attachmentFileContentType;
	}

	public String getNoteId() {
		return noteId;
	}

	public void setNoteId(String noteId) {
		this.noteId = noteId;
	}

	public List<Note> getNoteVersions() {
		return noteVersions;
	}
}
